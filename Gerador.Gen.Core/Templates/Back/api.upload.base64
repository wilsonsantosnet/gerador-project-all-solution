using Common.API;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.AspNetCore.Hosting;
using System.Threading.Tasks;

namespace <#namespace#>.Api.Controllers
{
    [Authorize]
    [Route("api/document/uploadbase64")]
    public class UplaodBase64Controller : Controller
    {

        private readonly ILogger _logger;
        private readonly IHostingEnvironment _env;
        private readonly string _uploadRoot;

        public UplaodBase64Controller(ILoggerFactory logger, IWebHostEnvironment env)
        {
            this._logger = logger.CreateLogger<UplaodBase64Controller>();
            this._env = env;
            this._uploadRoot = "upload";
        }

        [HttpPost]
        public async Task<IActionResult> Post(string base64, string fileName, string folder, bool rename = true)
        {
            var result = new HttpResult<List<string>>(this._logger);
            try
            {
                var uploads = Path.Combine(this._env.ContentRootPath, this._uploadRoot, folder);
                if (!Directory.Exists(uploads))
                    Directory.CreateDirectory(uploads);

                var fileSuccess = new List<string>();

                if (rename)
                    fileName = string.Format("{0}{1}", Guid.NewGuid().ToString(), Path.GetExtension(fileName));

                var fileBytes = Convert.FromBase64String(base64);
                await System.IO.File.WriteAllBytesAsync(fileName, fileBytes); 

                fileSuccess.Add(fileName);
                return result.ReturnCustomResponse(fileSuccess);
            }
            catch (Exception ex)
            {
                var responseEx = result.ReturnCustomException(ex, "<#namespace#> - uploadbase64");
				<#apiRetrhow#>
            }
        }

        [HttpDelete("{folder}/{fileName}")]
        public async Task<IActionResult> Delete(string folder, string fileName)
        {
            var result = new HttpResult<List<string>>(this._logger);
            try
            {
                var uploads = Path.Combine(this._env.ContentRootPath, this._uploadRoot, folder);
                await Task.Run(() =>
                {
                    new FileInfo(Path.Combine(uploads, fileName)).Delete();
                });
                return result.ReturnCustomResponse();

            }
            catch (Exception ex)
            {
                var responseEx = result.ReturnCustomException(ex, "<#namespace#> - uploadbase64");
				<#apiRetrhow#>
            }
        }
    }
}